#！usr/bin/env python
# -*-coding: utf-8 -*-
#Copyright (c) 2017 Iecas Inc. All rights reserved.
#edit by zdh 

USAGE = '''
同样的理论适用于编程。好的程序员，他们删掉的代码，比留下来的还要多很多。

1、写优雅的代码：
优雅的代码看起来就像是一些整整齐齐，套在一起的盒子。
它的逻辑大体上看起来，是枝丫分明的树状结构（tree）。这是因为程序所做的几乎一切事情，都是信息的传递和分支。

2、写模块化的代码
一个模块应该像一个电路芯片，它有定义良好的输入和输出
1）避免写太长的函数。如果发现函数太大了，就应该把它拆分成几个更小的。
2）制造小的工具函数。这些常用的代码，不管它有多短，提取出去做成函数，都可能是会有好处的
3）每个函数只做一件简单的事情。
    如果一个函数可能做两种事情，它们之间共同点少于它们的不同点，那你最好就写两个不同的函数，
    否则这个函数的逻辑就不会很清晰，容易出现错误。
    如果你发现两件事情大部分内容相同，只有少数不同，多半时候你可以把相同的部分提取出去，做成一个辅助函数。
4）避免使用全局变量和类成员（class member）来传递信息，尽量使用局部变量和参数。

3、写可读的代码
1）使用有意义的函数和变量名字。
2）局部变量应该尽量接近使用它的地方。
    局部变量的本质——它们就是电路里的导线，变量定义离用的地方越近，导线的长度就越短。
    你不需要摸着一根导线，绕来绕去找很远，就能发现接收它的端口
3）局部变量名字应该简短
4）把复杂的逻辑提取出去，做成“帮助函数”。
5）把复杂的表达式提取出去，做成中间变量。
6）在合理的地方换行。

4、写简单的代码
1）避免使用自增减表达式（i++，++i，i--，--i）
2）永远不要省略花括号。
3）合理使用括号，不要盲目依赖操作符优先级。
4）避免使用continue和break。
    循环语句（for，while）里面出现return是没问题的，然而如果你使用了continue或者break，
    就会让循环的逻辑和终止条件变得复杂，难以确保正确。   
    如果出现了continue，你往往只需要把continue的条件反向，就可以消除continue。

    如果出现了break，你往往可以把break的条件，合并到循环头部的终止条件里，从而去掉break。

    有时候你可以把break替换成return，从而去掉break。

    如果以上都失败了，你也许可以把循环里面复杂的部分提取出来，做成函数调用，
    之后continue或者break就可以去掉了。

5、写直观的代码

6、写无懈可击的代码
1）所谓“面条代码”，因为程序的逻辑分支，不是像一棵枝叶分明的树，而是像面条一样绕来绕去。
    每个if语句都有两个分支的理由是：如果if的条件成立，你做某件事情；但是如果if的条件不成立，
    你应该知道要做什么另外的事情。不管你的if有没有else，你终究是逃不掉，必须得思考这个问题的。
2）采用更加“函数式”的办法，只赋值一次。    
   eg:String s = "";if (x < 5) {  s = "ok";}   -> String s;if (x < 5) {  s = "ok";} else {  s = "";}
   
7、正确处理错误&正确的使用null
    1）不要把null放进“容器数据结构”里面。
    2）函数调用者：明确理解null所表示的意义，尽早检查和处理null返回值，减少它的传播。
    3）函数作者：明确声明不接受null参数，当参数是null时立即崩溃。
    
8、防止过度工程
    先把眼前的问题解决掉，解决好，再考虑将来的扩展问题。

    先写出可用的代码，反复推敲，再考虑是否需要重用的问题。

    先写出可用，简单，明显没有bug的代码，再考虑测试的问题。
    
'''

USAGE='''
代码本身的地位大大的高于测试。不忽视测试，但不会本末倒置，过分强调测试
1、在程序和算法定型之前，不要写测试。
2、不要为了写测试而改变本来清晰的编程方式。
3、不要测试“实现细节”，因为那等同于把代码写两遍。
    测试应该只描述程序需要满足的“基本性质”（比如 sqrt(4) 应该等于 2）
    而不是去描述“实现细节”（比如具体的开平方算法的步骤）。
4、一个测试只测试一个方面，避免重复测试。

把所有的20来个设计模式跟常用的编程概念做了一个映射。
这个映射居然是“多对一”（many-to-one）的

'''    
    
    
USAGE='''
用户友好定义
1、程序语言的设计思想，特别是其中的类型理论(type theory)可以比较好的解释它。
我们可以把机器和人看作同一个系统：
    这个系统有多个模块，包括机器模块和人类模块。

    机器模块之间的界面使用通常的程序接口。

    人机交互的界面就是机器模块和人类模块之间的接口。

    每个界面必须提供一定的抽象，用于防止使用者得到它不该知道的细节。这个使用者可能是机器模块，也可能是人类模块。

    抽象使得系统具有可扩展性。因为只要界面不变，模块改动之后，它的使用者完全不用修改。

2、在机器的各个模块间，抽象表现为函数或者方法的类型(type)，程序的模块(module)定义，
操作系统的系统调用(system call)，等等。
但是它们的本质都是一样的：他们告诉使用者“你能用我来干什么”。
3、如何对用户友好
    统一：随时注意，人是一个统一的系统的一部分，而不是什么古怪的神物。基本上可以把人想象成一个程序模块。

    抽象：最大限度的掩盖程序内部的实现，尽量不让人知道他不必要知道的东西。不愿意暴露给其它程序模块的细节，也不要暴露给人。“机所不欲，勿施于人”。

    充要：提供给人充分而必要（不多于）的机制来完成人想完成的任务。

    正交：机制之间应该尽量减少冗余和重叠，保持正交(orthogonal)。

    组合：机制之间应该可以组合(compose)，尽量使得干同一件事情只有一种组合。

    理性：并不是所有人想要的功能都是应该有的，他们经常欺骗自己，要搞清楚那些是他们真正需要的功能。

    信道：人的输入输出包括5种感官，虽然通常电脑只与人通过视觉和听觉交互。

    直觉：人是靠直觉和模型(model)思考的，给人的信息不管是符号还是图形，应该容易在人脑中建立起直观的模型，这样人才能高效的操作它们。

    上下文：人脑的“高速缓存”的容量是很小的。在任一特定时刻，应该只提供与当前被关注对象相关的操作，
    而不是提供所有情况下的所有操作供人选择。上下文菜单和依据上下文的键盘操作提示，貌似不错的主意。

'''    
    
